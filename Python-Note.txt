- 傳入參數

script名稱之後的其他參數，將轉換為list的strings指派給sys module的argv變數

舉例，呼叫 py sample.py p1 p2

檔案內容
import sys
print(argv[0]); // sample.py
print(argv[1]); // p1
print(argv[1]); // p2

- Python 原始檔預設以 UTF-8 編碼
- 變更編碼在檔案開頭新增
# -*- coding: cp1252 -*-

除法
17 / 3  # 回傳浮點數

除法
17 // 3  # 不回傳浮點數

四捨五入
print(round(2.666666, 2)) # 2.67

次方
5 ** 2 # 25
2 ** 7  # 128

python 不支援 ++ 

+= -= *= /=

等號
>>>
>>> width = 20
>>> height = 5 * 9
>>> width * height
900

In interactive mode, the last printed expression is assigned to the variable _
>>>
>>> tax = 12.5 / 100
>>> price = 100.50
>>> price * tax
12.5625
>>> price + _
113.0625
>>> round(_, 2)
113.06

較大的數字可以用_來分隔，易於閱讀
123_456_789 

_是read-only

其他數字 Deciaml/Fraction

#
# 隨機
#
import random
random_number =  random.randint(1,10)
random_number = random.random() 0.0000 ~ 0.99999

random.shuffle(list) # 可以打亂li
random.choice(list) # 隨機選取一個值

字串
"{:.2f}".format(2.6) # 2.60
"{:.2f}".format(2.622) # 2.6
"{:.2f}".format(2.629) # 2.63 有四捨五入

"TEST".lower() # 轉小寫
"TEST".count('t') # 取得字串出現次數
"we're right".title() # "We're Right"

單引號，雙引號皆可表示字串
>>> 'doesn\'t'  # "doesn't"
>>> "doesn't"   # "doesn't"
>>> '"Yes," they said.'   # '"Yes," they said.'
>>> "\"Yes,\" they said." # '"Yes," they said.' escaped
>>> '"Isn\'t," they said.'#

print()方法會忽略兩側closing quote並印出escaped/special字元
>>> '"Isn\'t," they said.' 		# '"Isn\'t," they said.'
>>> print('"Isn\'t," they said.')	# "Isn't," they said.
>>> s = 'First line.\nSecond line.'  # 我們想要 \n 表示換行
>>> s  # 'First line.\nSecond line.' 沒有 print(), \n 會在 output

>>> print(s)  
First line.
Second line. # 會換行

邏輯運算子 : and or not

#
# 轉型
#
num = str(20) # int轉型


使用r來表示raw string
>>> print('C:\some\name')  # \n視為換行
C:\some
ame
>>> print(r'C:\some\name')  # 字串前加r
C:\some\name

多行的字串
用"""...""" 或是 '''...'''

字串concate用+，重複用*
>>> 3 * 'un' + 'ium' #'unununium'

字串間的空白會自動連接
'Py' 'thon' # 'Python'
可以用來長句子換行
僅適用於string literals，變數不行，有變數的concate只能用+

Slicing :
沒有char型別，python只有長度1的字串
string可以indexed

>>> word = 'Python'
>>> word[0]   # 'P' 第1個
>>> word[-1]  # 'n' 倒數第1個
>>> word[-2]  # 'o' 倒數第2個
>>> word[-6]  # 'P' 倒數第6個

負數index從-1開始算起

>>> word[0:2]  # 'Py' 0 (包含) 到 2 (不包含)
>>> word[2:5]  # 'tho' 2 (包含) 到 5 (不包含)
>>> word[:2]   # 'Py' 開始到 position 2 (不包含)
>>> word[4:]   # 'on' 4 (包含) 到結束
>>> word[-2:]  # 'on' -1 (包含) 到結束

Slicing可以處理out of range
>>> word[4:42] # 'on'
>>> word[42:]  # '' 

字串也是immutable
>>> word[0] = 'J' # 錯誤

字串長度 len()

*** Lists ***

squares = [1, 4, 9, 16, 25] // 用中括號，逗號隔開
>>> squares[0]  # 1
>>> squares[-1] # 25
>>> squares[-3:]  # 回傳新的 list [9, 16, 25]
slicing 會回傳新的 list

>>> squares[:] # 回傳一個全新一樣的list [1, 4, 9, 16, 25]

list也可以concate
>>> squares + [36, 49, 64, 81, 100] # 回傳 [1, 4, 9, 16, 25, 36, 49, 64, 81, 100]

list是mutable的，與string不同
>>> cubes = [1, 8, 27, 65, 125]  
>>> cubes[3] = 64  
>>> cubes # [1, 8, 27, 64, 125] 成功置換

>>> cubes.append(216)  # 加到尾
>>> cubes.append(7 ** 3)  # 加到尾
>>> cubes # [1, 8, 27, 64, 125, 216, 343]

置換list中的元素
>>> letters = ['a', 'b', 'c', 'd', 'e', 'f', 'g']
>>> letters[2:5] = ['C', 'D', 'E']
>>> letters # ['a', 'b', 'C', 'D', 'E', 'f', 'g'] 中間的物件被換了

移除list中的元素
>>> letters[2:5] = []
>>> letters # ['a', 'b', 'f', 'g'] 中間的物件被移除了

清空list
letters[:] = []

list的最大值，最小值
list.max()
list.min()

list長度len()
>>> len(letters) # 4

list裡包含list
>>> a = ['a', 'b', 'c']
>>> n = [1, 2, 3]
>>> x = [a, n]
>>> x # [['a', 'b', 'c'], [1, 2, 3]]
>>> x[0] # ['a', 'b', 'c']
>>> x[0][1] #b

多重assignment
>>> a, b = 0, 1

右側的expression在assignment前會先被執行。
>>> a, b = b, a+b

右側的表達式從左到右計算。
... a, b = 0, 1
>>> while a < 10:
...		a, b = b, a+b # a+b 會先執行
...     print('a=',a , 'b=', b);
...     
a= 1 b= 1 # print 的結果之間會自動有空白
a= 1 b= 2
a= 2 b= 3
a= 3 b= 5
a= 5 b= 8
a= 8 b= 13
a= 13 b= 21

while迴圈內容>0為True，0為False
任何長度>0的物件在while迴圈內都是True，

print() 的結果之間會自動有空白

單引號字串，不用escape雙引號
雙引號字串，不用escape單引號

>>> x = int(input("Please enter an integer: "))
Please enter an integer: 42
>>> if x < 0:
...     x = 0
...     print('Negative changed to zero')
... elif x == 0:
...     print('Zero')
... else:
...     print('More')

另外 if elif 可用來取代其他語言的 switch

for迴圈
>>> words = ['cat', 'window', 'defenestrate']
>>> for w in words:
...     print(w, len(w))

如果沒有要用到 for 後的變數，可以使用 _

>>> words = ['cat', 'window', 'defenestrate']
>>> for _ in words:
...     print(')

iterate collection時同時要修改collection容易出錯，通常的做法是複製一個新的collection

# 建立一個 sample collection (此處使用的是dict)
users = {'Hans': 'active', 'Éléonore': 'inactive', '景太郎': 'active'}
print(type(users)); # <class 'dict'>

另一種建立dict的方式
users = dict()

users['a'] = 'A'
users['a'] = 'B' # 取代
print(users['a'] )  # B

users['b'] # 錯誤
users.get('b') # 無資料時回傳 None <class 'NoneType'>
users.get('b', 'tbd') # 無資料時回傳自訂字串
users.get('b', 20) # 無資料時回傳也可自訂型別

一次更新多筆可用update()
new_users = {'John': 'active', 'Snow': 'inactive', 'Rick0': 'active'}
users.update(new_users) #將new_users加入users

刪除
del users[key]

刪除後取得value
tmp = users.pop(key)

取得所有keys
users.keys()
dict_keys(['Hans', 'Éléonore', '景太郎', 'John', 'Snow', 'Rick0']) #<class 'dict_keys'>

取得所有values
users.values()
dict_values(['active', 'inactive', 'active', 'active', 'inactive', 'active']) #<class 'dict_values'>

取得所有key/value
users.items()

是否有KEY
'key' in users # 回傳True或False

==可判斷兩個dict是否含有相同的key/value組合，順序不重要
 
is運算子可判斷是否為相同的物件
print(users is new_users) # 回傳False


dict類似HashMap，key值唯一
取得value使用users[key]

# Strategy:  Iterate over a copy
for user, status in users.copy().items():
    if status == 'inactive':
        del users[user]

# Strategy:  Create a new collection
active_users = {}
for user, status in users.items():
    if status == 'active':
        active_users[user] = status

range() 方法
>>> for i in range(5): # 0-4
...     print(i)  # 0 1 2 3 4 5

>>> list(range(5, 10)) # 可以設定起始數字 [5, 6, 7, 8, 9] <class 'list'>
>>> list(range(0, 10, 3)) # 可以設定間隔 [0, 3, 6, 9]
>>> list(range(-10, -100, -30)) #[-10, -40, -70]

巡迴list的方法
>>> a = ['Mary', 'had', 'a', 'little', 'lamb']
>>> for i in range(len(a)):
...     print(i, a[i])

range(10) 回傳一個 range(0, 10) <class 'range'>

>>> sum(range(4))  # 0 + 1 + 2 + 3
6

這個else是針對內層的for迴圈，當for迴圈無break時則會執行else
>>> for n in range(2, 10):
...     for x in range(2, n):
...         if n % x == 0:
...             print(n, 'equals', x, '*', n//x)
...             break
...     else:
...         # loop fell through without finding a factor
...         print(n, 'is a prime number')

pass 
本身沒用途，算是一個placeholder，常用於建立一個空的類別
>>> class MyEmptyClass:
...     pass

或是用於方法當作placeholder
>>> def initlog(*args):
...     pass   # Remember to implement this!

# match有以下pattern
#
# Literal Patterns
# Wildcard Patterns
# OR Pattern
# AS Pattern
#
def http_error(status):
    match status:
        # literal pattern
        case 400:
            return "Bad request"
        # OR pattern / AS Pattern
        case 401 | 403 | 404 as errorCode: 
            return "Not allowed"
        # wildcard pattern 
        case _:
            return "Something's wrong with the internet"

# Wildcard Patterns 中的 _ 可以 match 所有物件，規定只能放最後
# 因為 OR Patterns 無法分辨內容，所以用 as 將值 bind 到變數

# 
# Capture Patterns
#
def point(point):
    match point: # 這裡定義的 point 是 tuple(aka 不能修改的list)
        case (0, 0):
            print("Origin")        
        case (x, 0):
            print(f"X={x}") # 會做 bind
        case (x, y): # 如同 Unpacking Assignment (x, y) = point.
            print(f"X={x}, Y={y}")

# 
# Class Patterns
#
class Point:
    x: int
    y: int

def where_is(point):
    match point:
        case Point(x=0, y=0):
            print("Origin")
        case Point(x=0, y=y):
            print(f"Y={y}")
        case Point(x=x, y=0):
            print(f"X={x}")
        case Point():
            print("Somewhere else")
        case _:
            print("Not a point")

# 自訂的 class 需在 pattern 中指定屬性名稱
# 有兩個方法可以不用指定屬性名稱
# 1. 使用 dataclass：這可以讓 class 實例的屬性擁有'順序'(positional argument)，無需在 pattern 中指定屬性名稱
# 2. 定義__match_args__

from dataclasses import dataclass


command = input("what are you doing next")

# [action, action2] = command.split() # 如果輸多於2個，unpack會失敗，split()用空白當作分隔

match command.split():
	case [action]: # 只有輸入1個字
		print('action only')
	case [action, obj]: # 輸入2個字
		print('action and obj')

match command.split():
    case ["quit"]:
        print("Goodbye!")        
    case ["look", obj] if obj == 'left': # uf 即所謂的 Guard
        print("look left!")        
    case ["get", obj]: # get 跟 go 的變數名稱可以設成不同
        print("get!") 
    case ["go", direction]: # get 跟 go 的變數名稱可以設成不同
        print("go!")

		
match command.split():
    case ["drop", *objects]:
        print(type(objects)) #<class 'list'>
        for obj in objects:
            print(obj)
    case _:
        print('wildcard')
# 如同 sequence unpacking，一個pattern不可有超過一個*


doom = ["first", ("l", "r"), "a", "b", "c"]

match doom:
    case ["first", (left, right), *rest]:
        print(type(rest)) 
        for obj in rest:
            print(obj) # a b c
        print(left, right) # l r
    case _:
        print('wildcard')
		
match command.split():    
    case ["north"] | ["go", "north"]:
        print("north")
    case ["get", obj] | ["pick", "up", obj] | ["pick", obj, "up"]:
        print('56')
		
match command.split():    
    case ["north"] | ["go", "north"]:
        print("north")
    #下面會錯誤，alternative patterns bind different names
    #case ["get", obj, obj2] | ["pick", "up", obj] | ["pick", obj, "up"]:
        #print('50')
# Or pattern 下同一個pattern的alternatives必須綁定一樣的變數
# [1, x] | [2, y] 不行
# [1, x] | [2, x] 可以

# 將OR的結果存入direction
match command.split():
    case ["go", ("north" | "south" | "east" | "west") as direction]:
        print(direction)
		
match command.split():
    case ["go", "north"] | ["go", "south"] | ["go", "east"] | ["go", "west"] as direction:
        print(direction)

class Room:
	exits:list

current_room = Room()
current_room.exits = ["north","south"]
		
match command.split():
    case ["go", direction] if direction in current_room.exits:
        print(direction)
    case ["go", _]:
        print("Sorry, you can't go that way")

class Person:	
	fname:str
	lname:str
	age:int
	
john = Person()
john.fname = 'John'
john.lname = 'Wicks'

match john:	
	# match named attribute 如下
	case Person(lname='Wicks', fname='John'): # 順序交換，可以match
		print('1st John')
	case Person('John', 'Wicks'): # Person accepts 0 positional sub-patterns (2 given)
		print('1st John')
	case Person(fname='John', lname='Wicks'): # 可以match
		print('2nd John')
		
# 上面的錯誤需要加入 __match_args__ = ("position", "button")

class Person:	
	__match_args__ = ("fname", "lname") # 設定
	fname:str
	lname:str
	age:int
	
john = Person()
john.fname = 'John'
john.lname = 'Wicks'

match john:
	# 不需要match named attribute，因為設定了__match_args__
	case Person('John', 'Wicks'): # 可以match了
		print('1st John')
	case Person(lname='Wicks', fname='John'): # 順序交換，可以match
		print('1st John')
	case Person(fname='John', lname='Wicks'): # 可以match
		print('2nd John')

#定義dataclass的話也定義positional arguments，'fname', 'lname', and 'age'
#這三個arguments是有順序的

@dataclass
class Person:	
	fname:str
	lname:str
	age:int
	
john = Person('John','Wicks',20) # 初始化 dataclass

match john:	
	case Person('John', 'Wicks'): # 可以match
		print('1st John')
	case Person(lname='Wicks', fname='John'): 
		print('1st John')	
	case Person(fname='John', lname='Wicks'): 
		print('2nd John')
#
# Mapping pattern
#
# {"bandwidth": b, "latency": l} 取得 "bandwidth" 與 "latency" 的值從dict. 
# 不像 sequence patterns, 其他的KEY被忽略了.使用 **rest 可以保留其他的KEY. (但是 **_ 是不被允許的)
	
actions = [{"text": "The shop keeper says 'Ah! We have Camembert, yes sir'", "color": "blue", "name":"Doc Rivers","age":65,"team":"LA Clippers"}
,{"sleep": 3},{"sound": "filename.ogg", "format": "ogg"}]

# 這裡的**rest就是一個 kwargs (keyword-args)

for action in actions:
    match action:
        case {"text": message, "color": c, **rest}:
            print(type(rest)) #<class 'dict'>
            for key in rest:
                print(key, rest[key])
            print('color=',c)
            print('message=',message)
        case {"sleep": duration}:
            print('sleep=',c)
        case {"sound": url, "format": "ogg"}:
            print('url=',url)
        case {"sound": _, "format": _}:
            warning("Unsupported audio format")

#
# 比對內建型別 Matching builtin classes
#

for action in actions:
    match action:
        case {"text": str(message), "color": str(c)}:            
            print('do something 2')
        case {"sleep": float(duration)}:
            print('do something 3')
        case {"sound": str(url), "format": "ogg"}:
            print('do something 4')
        case {"sound": _, "format": _}:
            warning("Unsupported audio format")
# {"text": str() as message, "color": str() as c}
# 確保text和color都是str，上述寫法也可以縮減成如下
# {"text": str(message), "color": str(c)}

#
# Sequence Pattern
#
# [x, y, *rest] and (x, y, *rest) 都用於 unpacking assignments. * 號後也可以是 _，像 (x, y, *_)，如此只會bind兩個變數，其他不會


from enum import Enum
class Color(Enum):
    RED = 'red'
    GREEN = 'green'
    BLUE = 'blue'

color = Color(input("Enter your choice of 'red', 'blue' or 'green': "))

match color:
    case Color.RED:
        print("I see red!")
    case Color.GREEN:
        print("Grass is green")
    case Color.BLUE:
        print("I'm feeling the blues :(")

		
food = ['a','b','c','d','k']
match food:
	# case ['a','b','c', _]:
		# print("wild")
	case ['a','b','d', *other]:
		print(f"{','.join(other)}'")
	case ['a', *other, 'e']:
		print(f"{','.join(other)}'")
	case['a', _] if "c" in food:
		print('in')
	case {"a":"", **kwargs}:
		print('desert')



https:/
5349023.github.io/articles/2021-03/py-structural-pattern-matching/
https://medium.com/short-bits/python-3-10-match-a-new-way-to-find-patterns-8452d1460407
https://peps.python.org/pep-0635/
https://benhoyt.com/cv/#about-me
https://www.geeksforgeeks.org/python-star-or-asterisk-operator/

#
# Python 指派值的方式說明 call-by-assignment
#
# Assigning to a variable name in Python makes the name bind to a different value 
# from what it currently was bound to (if indeed it was already bound), 
# rather than changing the value it currently binds to:

# 將一個值指派給一個變數名稱，表示該名稱會bind到一個不同的值(value)
# 而不是原來bind的值，指派這個動作並非變更原先bind的值

a = 7   # Create 7, bind a to it.
        #     a -> 7

b = a   # Bind b to the thing a is currently bound to.
        #     a
        #      \
        #       *-> 7
        #      /
        #     b

a = 42  # Create 42, bind a to it, b still bound to 7.
        #     a -> 42
        #     b -> 7


# Where the underlying data is immutable (cannot be changed), that usually makes Python look as if it's behaving identically 
# to the way other languages do (C and C++ come to mind). That's because the 7 (the actual object that the names are bound to) cannot be changed.

# But, for mutable data (same as using pointers in C or references in C++), 
# people can sometimes be surprised because they don't realise that the value behind it is shared:

a = [1,2,3]     # a -> [1,2,3]
print(a) # [1, 2, 3]

b = a           # a,b -> [1,2,3]
print(b) # [1, 2, 3]

a[1] = 42       # a,b -> [1,42,3]
print(a) 
print(b)
# 都是 [1, 42, 3]

# You need to understand that a[1] = 42 is different to a = [1, 42, 3]. The latter is an assignment, 
# which would result in a being re-bound to a different object, and therefore independent of b.

# 重點 : 如果用 = 指派新的值到變數名稱，像 a = [1,42,3]，b 還是會指向原本的 [1,2,3]

def set_list(list):
    list = ["A", "B", "C"]
    return list
 
def add(list):
    list.append("D") # += 效果等同 append
    return list
 
my_list = ["E"]
 
print(set_list(my_list))
 
print(add(my_list))


# The former is simply changing the mutable data that both a and b are bound to, which is why it affects both.


# 另一篇說法

If you pass a mutable object into a method, the method gets a reference to that same object and you can mutate it to your heart's delight, but if you rebind the reference in the method, the outer scope will know nothing about it, and after you're done, the outer reference will still point at the original object.

If you pass an immutable object to a method, you still can't rebind the outer reference, and you can't even mutate the object.

例如 def foo(bar): 這個 function 的參數傳遞，其實是在 foo 的 local namespace 裡幫傳進去的物件綁定了一個叫做 bar 的名字（所謂的 assignment）；如果你在 foo 裡 re-assign 了一個新的物件給 bar，實際上是把 bar 這個名字綁定到那個新的物件。

mutable objects: list, dict, set 的行為同 call-by-reference
immutable objects: boolean, int, float, long, str, unicode, tuple 的行為同 call-by-value
不過如果你把一個 mutable 物件放進 immutable 物件裡，例如把 list 放進 tuple 裡，則修改了 list 之後，那個 tuple 裡的 list 也是會被修改。

a_list = [1, 2, 3]
a_tuple = (a_list, 'a', 'b', 'c')
a_list.append(4)
Assignment is the binding of a name to an object: name = 'Molly'.
Assignment between names doesn't create a new object, both names are simply bound to the same object: nickname = name.

name = 'Mollie'
name = 'Vinta'
所謂的 assign 這個動作，其實是幫 'Mollie' 這個字串取一個名字叫做 name，所以如果你又加上一句 name = 'Vinta'，實際上是建立了一個新的物件（字串 'Vinta'），再把這個新字串綁定到 name 這個名字。

# if bar refers to a mutable object
def foo(bar):
    bar.append('new value')
    print(bar)
    # output: ['old value', 'new value']

answer_list = ['old value', ]
foo(answer_list)
print(answer_list)
# output: ['old value', 'new value']

# if bar refers to an immutable object
def foo(bar):
    bar = 'new value'
    print(bar)
    # output: 'new value'

answer_list = 'old value'
foo(answer_list)
print(answer_list)
# output: 'old value'

# if bar refers to a mutable object and re-assign it in foo
def foo(bar):
    bar = ['new value', ]
    print(bar)
    # output: ['new value', ]

answer_list = ['old value', ]
foo(answer_list)
print(answer_list)
# output: ['old value', ]

#
# 方法
#

>>> def fib(n):    # write Fibonacci series up to n
...     """Print a Fibonacci series up to n.""" 
...     a, b = 0, 1
...     while a < n:
...         print(a, end=' ')
...         a, b = b, a+b
...     print()

# 方法的第一行是 docstrings，用 """ """ 


# 方法執行時，會使用一個儲存該方法區域變數的
# 更準確地說，函數中的所有變數賦值(variable assignments)都將值存儲在 local symbol table 中
# 變數 reference 順序
	# 首先在 local symbol table 中查找，
	# 然後在 function 的 local symbol table 中查找，
	# 然後在 global symbol table 中查找
	# 最後在 built-in names table 中查找。
	
# Thus, global variables and variables of enclosing functions cannot be directly assigned a value within a function, although they may be referenced.	

# 全域變數與方法內的變數，在方法內不能直接 assign 值，但他們可以被 reference

#The actual parameters (arguments) to a function call are introduced in the local symbol table of the called function when it is called; thus, arguments are passed using call by value (where the value is always an object reference, not the value of the object).

# 呼叫方法時傳入的參數會被放到一個 local symbol table，換句話說，參數傳遞的方式是 Call-By-Object-Reference 

# When a function calls another function, or calls itself recursively, a new local symbol table is created for that call.

# 每個方法呼叫會有自己的 local symbol table

# 沒有回傳值的方法其實會回傳 None 物件

# 方法定義時，可設定參數預設值
def ask_ok(prompt, retries=4, reminder='Please try again!'):

# in 關鍵字
if ok in ('y', 'ye', 'yes'): 
# 變數 ok 的值是否在右邊的 sequence 中

# The default values are evaluated at the point of function definition in the defining scope
# 預設值是在方法定義的當下就決定

i = 5

def f(arg=i):
    print(arg)

i = 6
f() # 印出5，不是6

# 重要警告: 預設值只evaluate一次，當預設值為 mutable 物件像是list, dictionary, 或是物件會有不同
def f(a, L=[]):
    L.append(a)
    return L

print(f(1)) # [1]
print(f(2)) # [1, 2] 因為L的值已經被改變了
print(f(3)) # [1, 2, 3]

# 不要預設值不在呼叫間分享

def f(a, L=None):
    if L is None:
        L = []
    L.append(a)
    return L
	
# Keyword Arguments

def parrot(voltage, state='a stiff', action='voom', type='Norwegian Blue'): 
    print("-- This parrot wouldn't", action, end=' ') # end=' ' 表示不換行，預設 end 的值為 '\n'
    print("if you put", voltage, "volts through it.")
    print("-- Lovely plumage, the", type)
    print("-- It's", state, "!")

# 以下呼叫 OK
parrot(1000)                                          # 1 positional argument
parrot(voltage=1000)                                  # 1 keyword argument
parrot(voltage=1000000, action='VOOOOOM')             # 2 keyword arguments
parrot(action='VOOOOOM', voltage=1000000)             # 2 keyword arguments
parrot('a million', 'bereft of life', 'jump')         # 3 positional arguments
parrot('a thousand', state='pushing up the daisies')  # 1 positional, 1 keyword

# 以下呼叫不 OK
parrot()                     # required argument missing
parrot(voltage=5.0, 'dead')  # non-keyword argument after a keyword argument
parrot(110, voltage=220)     # duplicate value for the same argument
parrot(actor='John Cleese')  # unknown keyword argument
parrot(1000, voltage=1000)	 # multiple values for argument 'voltage'

# 當最後一個參數是 **name，這是一個 dict 包含'其他'所有的 keyword arguments 
# 搭配 *name 可以取得一個 tuple 包含'其他'的參數

def cheeseshop(kind, *arguments, **keywords):    
    for arg in arguments:
        print(arg) # a b
    print("-" * 40)
    for kw in keywords:
        print(kw, ":", keywords[kw]) # A B C

cheeseshop("Limburger", "a", "b", shopkeeper="A", client="B", sketch="C")

# kwargs 的列印順序一定是keyword argumen傳入的順序

#
# Special parameters
#
# / 和 * 是為了讓開發人員可以快速分清楚
# Positional-Only, Positional-or-Keyword, Keyword-Only Arguments 用的

def f(pos1, pos2, /, pos_or_kwd, *, kwd1, kwd2):
      -----------    ----------     ----------
        |             |                  |
        |        Positional or keyword   |
        |                                - Keyword only
         -- Positional only
		 
# Positional-Only Parameters
# 在 / 前面的參數傳入不可以用keyword argument的方式傳入
# / 是 optional 的

# Positional-or-Keyword Arguments
# 在 * 前面的參數傳入可用positional 或 keyword argument的方式傳入

# Keyword-Only Parameters
# 在 * 前面的參數傳入只能用keyword argument的方式傳入

def foo(name, **kwds):
    return 'name' in kwds
# 永遠無法回傳 True 因為'name'永遠綁定第一個參數
	
foo(1, **{'name': 2}) # TypeError: foo() got multiple values for argument 'name'

# 要解決上述問題可以用 / 如下

def foo(name, /, **kwds):
    return 'name' in kwds
foo(1, **{'name': 2}) # True

# 換句話說, positional-only parameters 的名稱可以用在 **kwds 而不會造成模擬兩可的情形

def foo(name, *, **kwds)
# 錯誤 named arguments must follow *，星號後需接 named arguments

# 使用 positional-only 如果不想讓使用者知道參數的名稱，這在參數沒有實際意義時是實用的， 如果你想要確保呼叫時參數的順序，or if you need to take some positional parameters and arbitrary keywords.

# 使用 keyword-only 當名字有意義或是當方法因參數名稱而更容易了解時，或是要避免使用者依賴傳遞參數的順序

# 關於 API，使用 positional-only 可避免因為未來參數名稱改變造成 API 壞掉

#
# Arbitrary Argument Lists
#

def write_multiple_items(file, separator, *args): # *args 是 tuple
    file.write(separator.join(args))
	
# 通常，這些可變參數將在形式參數清單中排在最後，因為它們會收集傳遞給函數的所有剩餘輸入參數。在 *args 參數之後出現的任何形式參數都是"keyword-only"參數，這意味著它們只能用作 keyword 而不是 positional arguments。

#
# Unpacking Argument Lists
#
# 當要傳入的參數已經是 list 或 tuple 時，但要傳入的函數需要 separate positional arguments，
# 此時就需要 unpacked，舉例來說，range()方法需要兩個分開的變數，作為起始與結束，
# 當沒辦法取得兩個分開的數，使用 * 運算子來將 tuple 或 list 做 unpack 傳入方法
 
 
list(range(3, 6))            # normal call with separate arguments [3, 4, 5]
args = [3, 6]
list(range(*args))            # call with arguments unpacked from a list [3, 4, 5]

# 同樣道理, dictionaries 可以使用 ** 運算子傳遞 keyword arguments
 
def parrot(voltage, state='a stiff', action='voom'):
    print("-- This parrot wouldn't", action, end=' ')
    print("if you put", voltage, "volts through it.", end=' ')
    print("E's", state, "!")
d = {"voltage": "four million", "state": "bleedin' demised", "action": "VOOM"}
parrot(**d)

#
# Lambda Expressions
#
# 小型匿名方法可以用 lambda 關鍵字建立，Lambda 方法可以用於所有需要方法物件的地方. 語法限制上是 single expression，實際上他們只是一般方法定義的語法糖，如同巢狀方法定義, lambda 方法可以參考他的 containg scope 的變數

def make_incrementor(n):
    return lambda x: x + n

f = make_incrementor(42) # <class 'function'>
f(0) # 42
f(1) # 43

#上述範例使用 lambda expression 回傳一個 function，令一種用法是將一個小方法作為參數傳遞:

pairs = [(1, 'one'), (2, 'two'), (3, 'three'), (4, 'four')]
pairs.sort(key=lambda pair: pair[1])
pairs
[(4, 'four'), (1, 'one'), (3, 'three'), (2, 'two')]

#
# Documentation Strings
#
def my_function():
    """Do nothing, but document it.

    No, really, it doesn't do anything.
    """
    pass
print(my_function.__doc__)
# 第一話開頭大寫，.結束，紀錄Summary
# 多行的話，第二行空白

#
# Function Annotation
#
>>> def f(ham: str, eggs: str = 'eggs') -> str:
...     print("Annotations:", f.__annotations__)
...     print("Arguments:", ham, eggs)
...     return ham + ' and ' + eggs
...
>>> f('spam')
# Return annotations 使用 -> 表示回傳型態
# Parameter annotations 在參數名稱用冒號定義, 後面接著型態

#
# Coding Style
#

# 用4個空白，不用 tab
# 方法類別間用空白行隔開
# 使用 docstring
# 運算子兩側要空白，逗號後要空白，
# UpperCamelCase 類別命名方式
# lowercase_with_underscores 為 function/method 的命名方式

#
# Scope
#

if, while, for 內的變數沒有local scope
fruits = ['apple','banana']

if 'apple' in fruits:
   new_fruit = 'fuji'

print(new_fruit) # 可以讀到new_fruit印出'fuji'
